{"version":3,"sources":["config.ts","inversify/types.ts","services/ApiInteractionService.ts","typing.ts","Map/MapStore.ts","inversify/inversify.config.ts","services/hooks.ts","Map/Radio.tsx","Map/IsochroneSettings.tsx","Map/Map.tsx","App/App.tsx","index.tsx"],"names":["accessToken","geojsonFormat","type","data","features","isoLayer","id","source","layout","paint","TYPES","MapStore","Symbol","for","urlBase","getIso","lat","lon","a","profile","minutes","query","fetch","json","res","TravelMode","Bufferization","injectable","maxDuration","travelMode","walking","bufferization","isochrones","setTravelMode","setBufferizationMode","setMaxDuration","makeObservable","this","action","observable","container","Container","useInject","useState","get","store","bind","to","inSingletonScope","Radio","observer","value","defaultValue","onChange","className","name","checked","e","IsochroneSettings","cycling","driving","byAir","mapboxgl","workerClass","require","default","Map","mapStore","mapContainerRef","useRef","lng","setLng","setLat","zoom","useEffect","map","current","style","center","on","addSource","addLayer","marker","Marker","color","lngLat","setLngLat","addTo","getSource","setData","bufferLayer","buffer","point","units","areaBuilder","remove","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05bb0f3a.chunk.js","sourcesContent":["export const accessToken = 'pk.eyJ1Ijoic2FwZmlyMCIsImEiOiJja284ZGk3aTkwNnZoMnBxbXM4eWl4Mmw4In0.XwtrCKXKgPC5fY_6a18XJg'\r\n\r\nexport const geojsonFormat = {\r\n    type: 'geojson' as const,\r\n    data: {\r\n        type: 'FeatureCollection',\r\n        features: [],\r\n    },\r\n}\r\n\r\nexport const isoLayer = {\r\n    id: 'isoLayer',\r\n    type: 'fill',\r\n    source: 'iso',\r\n    layout: {},\r\n    paint: {\r\n        'fill-color': '#5a3fc0',\r\n        'fill-opacity': 0.3,\r\n    },\r\n}","\r\nconst TYPES = {\r\n    MapStore: Symbol.for('MapStore'),\r\n};\r\n\r\nexport { TYPES };\r\n\r\n","import { accessToken } from \"../config\";\r\n\r\nconst urlBase = 'https://api.mapbox.com/isochrone/v1/mapbox/';\r\n\r\n\r\nexport async function getIso(lat: number, lon: number, profile='walking', minutes='10') {\r\n    const query = `${urlBase}${profile}/${lon},${lat}?contours_minutes=${minutes}&polygons=true&access_token=${accessToken}`;\r\n    const data = await fetch(query)\r\n    const res = await data.json()\r\n    return res\r\n}","export enum TravelMode {\r\n    walking,\r\n    cycling,\r\n    driving\r\n}\r\n\r\nexport enum Bufferization {\r\n    isochrones,\r\n    byAir,\r\n}","import { injectable } from \"inversify\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { Bufferization, TravelMode } from \"../typing\";\r\n\r\n@injectable()\r\nexport class MapStore {\r\n    maxDuration = '10';\r\n    travelMode = TravelMode[TravelMode.walking] \r\n    bufferization = Bufferization[Bufferization.isochrones]\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            setMaxDuration: action,\r\n            setTravelMode: action,\r\n            setBufferizationMode: action,\r\n            maxDuration: observable,\r\n            travelMode: observable,\r\n            bufferization: observable,\r\n        })\r\n    }\r\n\r\n    setTravelMode = (travelMode: string) => {\r\n        this.travelMode = travelMode \r\n    }\r\n\r\n    setBufferizationMode = (bufferization: string) => {\r\n        this.bufferization = bufferization \r\n    }\r\n\r\n    setMaxDuration = (maxDuration: string) => {\r\n        this.maxDuration = maxDuration\r\n    }\r\n}","import { Container } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { MapStore } from \"../Map/MapStore\";\r\nimport { TYPES } from \"./types\";\r\n\r\nconst container = new Container();\r\n\r\ncontainer.bind<MapStore>(TYPES.MapStore).to(MapStore).inSingletonScope();\r\n\r\n\r\nexport { container };\r\n","import { useState } from \"react\";\r\nimport { container } from \"../inversify/inversify.config\";\r\n\r\nexport function useInject<T>(id: string | symbol): T {\r\n    const [store, setStore] = useState(() => {\r\n        return container.get<T>(id);\r\n    });\r\n    return store;\r\n}","import { observer } from \"mobx-react\";\r\n\r\nexport type RadioProps = {\r\n    value: string;\r\n    defaultValue: string;\r\n    onChange: (val: string) => void;\r\n};\r\n\r\nexport const Radio = observer(({ value, defaultValue, onChange }: RadioProps) => {    \r\n    return <label className=\"toggle-container\">\r\n        <input\r\n            name={value}\r\n            type=\"radio\"\r\n            value={value}\r\n            checked={defaultValue === value}\r\n            onChange={(e) => onChange(defaultValue)}\r\n        />\r\n        <div className=\"toggle toggle--active-null toggle--null\">{defaultValue}</div>\r\n    </label>\r\n});\r\n","import { observer } from 'mobx-react';\r\nimport { TYPES } from '../inversify/types';\r\nimport { useInject } from '../services/hooks';\r\nimport { Bufferization, TravelMode } from '../typing';\r\nimport { MapStore } from './MapStore';\r\nimport { Radio } from './Radio';\r\n\r\nexport const IsochroneSettings = observer(() => {\r\n    const { setMaxDuration, setTravelMode, maxDuration, travelMode, bufferization, setBufferizationMode } = useInject<MapStore>(TYPES.MapStore);\r\n\r\n    return (\r\n        <div className=\"absolute fl my24 mx24 py24 px24 bg-gray-faint round\">\r\n            <form id=\"params\">\r\n                <h4 className=\"txt-m txt-bold mb6\">Choose a travel mode:</h4>\r\n                <div className=\"mb12 mr12 toggle-group align-center\">\r\n                    <Radio value={travelMode} defaultValue={TravelMode[TravelMode.walking]} onChange={setTravelMode} />\r\n                    <Radio value={travelMode} defaultValue={TravelMode[TravelMode.cycling]} onChange={setTravelMode} />\r\n                    <Radio value={travelMode} defaultValue={TravelMode[TravelMode.driving]} onChange={setTravelMode} />\r\n                </div>\r\n                <h4 className=\"txt-m txt-bold mb6\">Choose a maximum duration:</h4>\r\n                <div className=\"mb12 mr12 toggle-group align-center\">\r\n                    <Radio value={maxDuration} defaultValue={'10'} onChange={setMaxDuration} />\r\n                    <Radio value={maxDuration} defaultValue={'20'} onChange={setMaxDuration} />\r\n                    <Radio value={maxDuration} defaultValue={'30'} onChange={setMaxDuration} />\r\n                </div>\r\n                <h4 className=\"txt-m txt-bold mb6\">Choose a bufferization method:</h4>\r\n                <div className=\"mb12 mr12 toggle-group align-center\">\r\n                    <Radio value={bufferization} defaultValue={Bufferization[Bufferization.byAir]} onChange={setBufferizationMode} />\r\n                    <Radio value={bufferization} defaultValue={Bufferization[Bufferization.isochrones]} onChange={setBufferizationMode} />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n});\r\n","import { buffer, point } from '@turf/turf';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { observer } from 'mobx-react';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { accessToken, geojsonFormat, isoLayer } from '../config';\r\nimport { TYPES } from '../inversify/types';\r\nimport { getIso } from '../services/ApiInteractionService';\r\nimport { useInject } from '../services/hooks';\r\nimport { Bufferization } from '../typing';\r\nimport { IsochroneSettings } from './IsochroneSettings';\r\nimport { MapStore } from './MapStore';\r\n\r\nmapboxgl.accessToken = accessToken;\r\n// @ts-ignore\r\n// eslint-disable-next-line import/no-webpack-loader-syntax \r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n\r\nconst Map = observer(() => {\r\n    const mapStore = useInject<MapStore>(TYPES.MapStore);\r\n\r\n    const mapContainerRef = useRef(null);\r\n\r\n    const [lng, setLng] = useState(44.5);\r\n    const [lat, setLat] = useState(48.7);\r\n    const [zoom, setZoom] = useState(11.5);\r\n    const bufferDistance = 500;\r\n\r\n    useEffect(() => {\r\n        const map = new mapboxgl.Map({\r\n            container: mapContainerRef.current!,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [lng, lat],\r\n            zoom: zoom,\r\n        });\r\n\r\n        map.on('load', async function () {\r\n            map.addSource('iso', geojsonFormat as any);\r\n            map.addLayer(isoLayer as any, 'poi-label');\r\n        });\r\n\r\n        const marker = new mapboxgl.Marker({\r\n            color: '#314ccd',\r\n        });\r\n\r\n        map.on('click', async function (e) {\r\n            setLat(e.lngLat.lat);\r\n            setLng(e.lngLat.lng);\r\n            marker.setLngLat(e.lngLat).addTo(map);\r\n            const source = map.getSource('iso') as mapboxgl.GeoJSONSource;\r\n\r\n            const areaBuilder = {\r\n                [Bufferization[Bufferization.isochrones]]: async () => {\r\n                    const features = await getIso(\r\n                        e.lngLat.lat,\r\n                        e.lngLat.lng,\r\n                        mapStore.travelMode,\r\n                        mapStore.maxDuration,\r\n                    );\r\n                    source.setData(features);\r\n                },\r\n                [Bufferization[Bufferization.byAir]]: async () => {\r\n                    const bufferLayer = buffer(point([e.lngLat.lng, e.lngLat.lat]), bufferDistance, {\r\n                        units: 'meters',\r\n                    });\r\n                    source.setData(bufferLayer);\r\n                },\r\n            };\r\n\r\n            await areaBuilder[mapStore.bufferization]();\r\n\r\n            // const geoJson = map.querySourceFeatures('iso', { sourceLayer: 'isoLayer' });\r\n            // console.log(geoJson);\r\n        });\r\n\r\n        return () => map.remove();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"map-container\" ref={mapContainerRef} />\r\n            <IsochroneSettings />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport Map from '../Map/Map';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Map />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}